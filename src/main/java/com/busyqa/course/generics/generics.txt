Generics

In a nutshell, generics enable types (classes and interfaces) to be parameters 
when defining classes, interfaces and methods. Much like the more familiar formal 
parameters used in method declarations, type parameters provide a way for you to 
re-use the same code with different inputs. The difference is that the inputs to 
formal parameters are values, while the inputs to type parameters are types.

Type Parameter Naming Conventions

By convention, type parameter names are single, uppercase letters. This stands in 
sharp contrast to the variable naming conventions that you already know about, 
and with good reason: Without this convention, it would be difficult to tell the 
difference between a type variable and an ordinary class or interface name.

The most commonly used type parameter names are:

E - Element (used extensively by the Java Collections Framework)
K - Key
N - Number
T - Type
V - Value
S,U,V etc. - 2nd, 3rd, 4th types

https://docs.oracle.com/javase/tutorial/java/generics/types.html